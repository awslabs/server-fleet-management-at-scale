#===============================================================================
# Template: server-fleet-management-at-scale.template
#
# Purpose:  Builds SSM resources for fleet management:
#           - patch baseline
#           - maintenance window
#           - inventory association
#           - resource bucket encryption key
#           - resource bucket
#           - resource sync
#           - Inspector association
#           - scheduled Inspector assessment runs
#
#
#===============================================================================
AWSTemplateFormatVersion: 2010-09-09
Description: "(SO0043) - The AWS CloudFormation template for deployment of the Server Fleet Management at Scale. Version %%VERSION%%"

#==================================================
# Metadata
#==================================================
Metadata:

  AWS::CloudFormation::Interface:

    ParameterGroups:
      - Label:
          default: Settings
        Parameters:
          - Environment

      - Label:
          default: |
            You can drop this reference implementation into your existing
            infrastructure. You can also optionally create a sample fleet
            of four instances, including the necessary networking resources.
        Parameters:
          - CreateFleet

      - Label:
          default: |
            This reference implementation will use the Inspector vulnerability
            management service in regions where it is supported. Otherwise,
            the following settings will have no effect.
        Parameters:
          - NotificationEmailAddress

    ParameterLabels:
      Environment:
        default: Managed Instances Tag Value

      CreateFleet:
        default: Create Sample Fleet?

      NotificationEmailAddress:
        default: Notification Email Address

#==================================================
# Parameters
#==================================================
Parameters:

  Environment:
    Description: |
      AWS Systems Manager Actions capability will patch managed instances
      with a tag name of "Patch Group" and will use the value you provide here.
      AWS Systems Manager Insights capability will be performed on managed instances
      with the tag name of "Environment" and will use the value you provide here.
    Type: String
    Default: Sample Fleet
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z0-9+-=._:/@ ]*$
    ConstraintDescription: |
      Malformed Input Parameter: Environment must contain only upper and lower
      case letters, numbers, and the characters '+,-,=,.,_,:,/,@'. Minimum length
      is 1 and maximum length is 255.

  CreateFleet:
    Description: |
      Creates a network and fleet of four instances that you can use for this
      reference implementation. NOTE: The instances and some network resources
      will incur a charge for their use.
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"

  NotificationEmailAddress:
    Description: |
      Notification email address used to receive Inspector assessment run
      completion notifications. **NOTE**: You will receive a confirmation email
      that you must accept in order to receive these notifications. (This feature
      only applies if you launch the template in a region that supports Inspector.)
    Type: String

#==================================================
# Conditions
#==================================================
Conditions:

  CreateFleet: !Equals [!Ref CreateFleet, "Yes"]

  #==================================================
  # Source: https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/
  #==================================================
  APRegionSupportsInspector: !Or
    - !Equals [!Ref "AWS::Region", "ap-northeast-1"]
    - !Equals [!Ref "AWS::Region", "ap-northeast-2"]
    - !Equals [!Ref "AWS::Region", "ap-south-1"]
    - !Equals [!Ref "AWS::Region", "ap-southeast-2"]

  EURegionSupportsInspector: !Or
    - !Equals [!Ref "AWS::Region", "eu-central-1"]
    - !Equals [!Ref "AWS::Region", "eu-west-1"]
    - !Equals [!Ref "AWS::Region", "eu-west-2"]
    - !Equals [!Ref "AWS::Region", "eu-north-1"]

  MERegionSupportsInspector: !Equals [!Ref "AWS::Region", "me-south-1"]

  USRegionSupportsInspector: !Or
    - !Equals [!Ref "AWS::Region", "us-east-1"]
    - !Equals [!Ref "AWS::Region", "us-east-2"]
    - !Equals [!Ref "AWS::Region", "us-west-1"]
    - !Equals [!Ref "AWS::Region", "us-west-2"]

  # GOVRegionSupportsInspector: !Or
  #   - !Equals [!Ref "AWS::Region", "us-gov-east-1"]
  #   - !Equals [!Ref "AWS::Region", "us-gov-west-1"]

  # For GOV Cloud
  # RegionSupportsInspector: !Or [!Condition APRegionSupportsInspector, !Condition EURegionSupportsInspector, !Condition USRegionSupportsInspector, !Condition GOVRegionSupportsInspector]
  RegionSupportsInspector: !Or [!Condition APRegionSupportsInspector, !Condition EURegionSupportsInspector, !Condition USRegionSupportsInspector]

  SendAnonymousData: !Equals [!FindInMap ["Send", "AnonymousUsage", "Data"], "Yes"]

#==================================================
# Mappings
#==================================================
Mappings:

  # The sample fleet will use the AMI ID appropriate to the region in which
  # the stack is launched. These IDs should be periodically updated.
  AWSAMIRegionMap:
    # https://docs.aws.amazon.com/inspector/latest/userguide/inspector_cis.html
    # The latest AMIs, which support Amazon Inspector Center for Internet Security (CIS), for the sample fleet are
    AMI:
      AMZNLINUX: "amzn-ami-hvm-2018.03.0.20190826*x86_64-gp2"
      REDHAT: "RHEL-7.7_HVM-20191028-x86_64-1-Hourly2-GP2"
      UBUNTU: "ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-20191002"
      WINDOWS: "Windows_Server-2019-English-Full-Base-2020.05.13"

  EC2:
    Instance:
      Type: t3.large

  SourceCode:
    General:
      S3Bucket: "%%BUCKET_NAME%%"
      KeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"

  Solution:
    Data:
      Id: "SO0043"
      Version: "%%VERSION%%"

  Send:
    AnonymousUsage:
      Data: "Yes"

#==================================================
# Resources
#==================================================
Resources:

  #==================================================
  # SSM will use this role during the maintenance window
  #==================================================
  MaintenanceWindowServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole
      Policies:
        - PolicyName: PassRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - "*"
    Metadata:
      AmazonSSMMaintenanceWindowRole:
        Description: The managed policy is needed to control access to AWS Systems Manager maintenance windows.
        Documentation: https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-perm-console.html
      cfn_nag:
        rules_to_suppress:
          - id: F38
            reason: "iam:PassRole for * is needed. See https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-permissions.html"
          - id: W11
            reason: "iam:PassRole for * is needed. See https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-permissions.html"

  #==================================================
  # This defines a seven-day frequency for when the
  # patches will be applied.
  #==================================================
  MaintenanceWindow:
    Type: AWS::SSM::MaintenanceWindow
    Properties:
      Description: Server Fleet Management Solution Weekly Maintenance Window
      AllowUnassociatedTargets: false
      Cutoff: 1
      Schedule: rate(7 days)
      Duration: 2
      Name: server-fleet-management-solution-weekly-patching

  #==================================================
  # This target defines the managed instances to patch
  #==================================================
  MaintenanceWindowTarget:
    Type: AWS::SSM::MaintenanceWindowTarget
    Properties:
      Description: Server Fleet Management Solution Instances
      WindowId: !Ref MaintenanceWindow
      ResourceType: INSTANCE
      Targets:
        - Key: tag:Patch Group
          Values:
          - !Ref Environment

  #==================================================
  # This task installs the security patches
  #==================================================
  MaintenanceWindowTask:
    Type: AWS::SSM::MaintenanceWindowTask
    Properties:
      Description: Runs Server Fleet Management Solution patch baseline
      ServiceRoleArn: !GetAtt MaintenanceWindowServiceRole.Arn
      MaxErrors: 1
      TaskArn: AWS-RunPatchBaseline
      MaxConcurrency: 100%
      WindowId: !Ref MaintenanceWindow
      Priority: 1
      TaskType: RUN_COMMAND
      TaskInvocationParameters:
        MaintenanceWindowRunCommandParameters:
          Comment: Runs patch baseline
          TimeoutSeconds: 600
          Parameters: {"Operation":["Install"]}
          OutputS3BucketName: !Ref ArtifactBucket
      Targets:
      - Values:
        - !Ref MaintenanceWindowTarget
        Key: WindowTargetIds

  #==================================================
  # S3 bucket for saved SSM artifacts
  #==================================================
  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref ArtifactBucketEncryptionKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      LoggingConfiguration:
        DestinationBucketName: !Ref ArtifactLoggingBucket
        LogFilePrefix: logs

  ArtifactLoggingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: This is a logging bucket for artifact bucket.
          - id: W51
            reason: This is a logging bucket for artifact bucket.


  #==================================================
  # Create a KMS key to use for S3 object encryption
  #==================================================
  ArtifactBucketEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key used for Server Fleet Management Solution artifact bucket
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Statement:
        - Sid: manage-key
          Action:
          - kms:*
          Effect: Allow
          Principal:
            AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
          Resource: "*"
        - Sid: ssm-access-policy-statement
          Action:
          - kms:GenerateDataKey
          Effect: Allow
          Principal:
            Service: ssm.amazonaws.com
          Resource: "*"

  #==================================================
  # Create an alias for the KMS key
  # The alias is created here so that it is more easily
  # identifiable in the console; key aliases cannot be
  # used in policies.
  #==================================================
  ArtifactBucketEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/ssm-bucket-encryption-key
      TargetKeyId: !Ref ArtifactBucketEncryptionKey

  #==================================================
  # Allow the SSM service to use this bucket
  #==================================================
  ArtifactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref ArtifactBucket
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ArtifactBucketPermissionsCheck
            Effect: Allow
            Resource: !Sub ${ArtifactBucket.Arn}
            Principal:
              Service: ssm.amazonaws.com
            Action:
              - s3:GetBucketAcl
          - Sid: ArtifactBucketDelivery
            Effect: Allow
            Resource: !Sub ${ArtifactBucket.Arn}/*
            Principal:
              Service: ssm.amazonaws.com
            Action:
              - s3:PutObject
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

  #==================================================
  # Create an association to gather instance inventory
  #==================================================
  InventoryAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: AWS-GatherSoftwareInventory
      AssociationName: GatherSoftwareInventory
      Targets:
        - Key: tag:Environment
          Values:
          - !Ref Environment
      ScheduleExpression: rate(1 day)
      Parameters:
        # The files that are collected are OS-specific.
        files:
        - '[
            {
              "Path": "/usr/bin",
              "Pattern": [
                "aws*",
                "*ssm*"
              ],
              "Recursive": false
            },
            {
              "Path": "/var/log",
              "Pattern": [
                "amazon*.*"
              ],
              "Recursive": true,
              "DirScanLimit": 1000
            }
          ]'
        windowsUpdates:
        - Enabled
        awsComponents:
        - Enabled
        customInventory:
        - Enabled
        networkConfig:
        - Enabled
        windowsRegistry:
        - '[{"Path":"HKEY_LOCAL_MACHINE\SOFTWARE\Amazon","Recursive":true}]'
        applications:
        - Enabled
        instanceDetailedInformation:
        - Enabled
        services:
        - Enabled
        windowsRoles:
        - Enabled

  #==================================================
  # Store the managed instance tag value in Parameter Store
  #==================================================
  ManagedInstanceTagValueParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: ManagedInstanceTagValue
      Value: !Ref Environment
      Type: String
      Description: Environment tag value given to Server Fleet Management Solution managed instances

  #==================================================
  # Create the resource sync that will store Systems
  # Manager data in the specified S3 bucket.
  #==================================================
  ResourceDataSync:
    Type: AWS::SSM::ResourceDataSync
    DependsOn: ArtifactBucketPolicy
    Properties:
      SyncName: FleetManagement
      BucketName: !Ref ArtifactBucket
      BucketRegion: !Ref "AWS::Region"
      SyncFormat: JsonSerDe
      KMSKeyArn: !GetAtt ArtifactBucketEncryptionKey.Arn

  #============================================================================
  #
  # INSPECTOR
  #
  # This section creates the resources for creating and managing Inspector
  # assessments.
  #
  #============================================================================
  InspectorStack:
    Type: AWS::CloudFormation::Stack
    Condition: RegionSupportsInspector
    Properties:
      TemplateURL: !Sub
        - "https://s3.${AWS::Region}.amazonaws.com/${S3Bucket}-${AWS::Region}/${KeyPrefix}/server-fleet-management-at-scale-inspector.template"
        - S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
          KeyPrefix: !FindInMap ["SourceCode", "General", "KeyPrefix"]
      Parameters:
        Environment: !Ref Environment
        NotificationEmailAddress: !Ref NotificationEmailAddress
        UUID: !Sub ${CreateUniqueID.UUID}
        SendAnonymousData: !FindInMap ["Send", "AnonymousUsage", "Data"]

  #==================================================
  #
  # SAMPLE FLEET
  #
  # These networking resources will be created if the option was chosen
  # to do so. This section includes:
  #   - a VPC
  #   - an internet gateway
  #   - a NAT gateway
  #   - a route and route table
  #   - a public subnet (for the NAT gateway)
  #   - a private subnet for sample instances
  #   - an auto scaling group with four sample instances
  #   - a launch configuration
  #   - a security group
  #==================================================
  VPC:
    Type: AWS::EC2::VPC
    Condition: CreateFleet
    Properties:
      CidrBlock: !Sub 10.0.0.0/16
      Tags:
      - Key: Name
        Value: Sample Fleet VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateFleet
    Properties:
      Tags:
      - Key: Name
        Value: Sample Fleet Internet Gateway
      - Key: Network
        Value: Public

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateFleet
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId: !Ref InternetGateway

  #==================================================
  # Public subnet for the NAT Gateway
  #==================================================
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Condition: CreateFleet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/20
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
      - Key: Name
        Value: Sample Fleet Public Subnet A
      - Key: Network
        Value: Public
      MapPublicIpOnLaunch: true
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: This is a public subnet.

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: CreateFleet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.16.0/20
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
      - Key: Name
        Value: Sample Fleet Public Subnet B
      - Key: Network
        Value: Public
      MapPublicIpOnLaunch: true
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W33
            reason: This is a public subnet.

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateFleet
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: Sample Fleet Public Subnet
      - Key: Network
        Value: Public

  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Condition: CreateFleet
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateFleet
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateFleet
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicSubnetRouteTable

  #==================================================
  # Private subnet for the EC2 instances
  #==================================================
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: CreateFleet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.64.0/20
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
      - Key: Name
        Value: Sample Fleet Private Subnet A
      - Key: Network
        Value: Private

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: CreateFleet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.80.0/20
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
      - Key: Name
        Value: Sample Fleet Private Subnet B
      - Key: Network
        Value: Private

  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateFleet
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: Sample Fleet Private Subnet A
      - Key: Network
        Value: Private

  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateFleet
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: Sample Fleet Private Subnet B
      - Key: Network
        Value: Private

  PrivateSubnetARoute:
    Type: AWS::EC2::Route
    Condition: CreateFleet
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA

  PrivateSubnetBRoute:
    Type: AWS::EC2::Route
    Condition: CreateFleet
    Properties:
      RouteTableId: !Ref PrivateSubnetBRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayB

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateFleet
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateSubnetARouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateFleet
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateSubnetBRouteTable

  #==================================================
  # NAT Gateway
  #==================================================
  NatAEip:
    Type: AWS::EC2::EIP
    Condition: CreateFleet
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Condition: CreateFleet
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt NatAEip.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: Sample Fleet NAT Gateway A

  NatBEip:
    Type: AWS::EC2::EIP
    Condition: CreateFleet
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NATGatewayB:
    Type: AWS::EC2::NatGateway
    Condition: CreateFleet
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt NatBEip.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags:
      - Key: Name
        Value: Sample Fleet NAT Gateway B

  #========================================================
  # Security group that will restrict traffic to 80 and 443
  #========================================================
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateFleet
    Properties:
      GroupDescription: Allow port access to Server Fleet Management Solution managed instances
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: https ports to public
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: http ports to public
      Tags:
      - Key: Name
        Value: Sample Fleet Security Group
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: The security group only allows to open 80 and 443 ports.

  #==================================================
  # IAM role to be used by the application instances
  # The role needs to interact with SSM for remote
  # command execution.
  #==================================================
  InstanceRole:
    Type: AWS::IAM::Role
    Condition: CreateFleet
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
    Metadata:
      AmazonSSMManagedInstanceCore:
        Description: The managed policy is needed to enable AWS Systems Manager service core functionality on Amazon EC2 instances.
        Documentation: https://docs.aws.amazon.com/systems-manager/latest/userguide/setup-instance-profile.html

  #==================================================
  # IAM profile to be used by the application instances
  #==================================================
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: CreateFleet
    Properties:
      Roles: [!Ref InstanceRole]

  #==================================================
  # Instances of various OS supported by SSM
  #==================================================
  AMZNLinux:
    Type: AWS::EC2::Instance
    Condition: CreateFleet
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !GetAtt AMZNLinuxAMIInfo.ImageId
      InstanceType: !FindInMap [ EC2, Instance, Type ]
      NetworkInterfaces:
        - DeleteOnTermination: true
          Description: ENI for Amazon Linux Sample Fleet instance
          DeviceIndex: '0'
          SubnetId: !Ref PrivateSubnetA
          GroupSet:
          - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: Server Fleet Management Solution Sample Fleet Instance
        - Key: Environment
          Value: !Ref Environment
        - Key: Patch Group
          Value: !Ref Environment

  RHELInstance:
    Type: AWS::EC2::Instance
    Condition: CreateFleet
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !GetAtt RHELAMIInfo.ImageId
      InstanceType: !FindInMap [ EC2, Instance, Type ]
      NetworkInterfaces:
        - DeleteOnTermination: true
          Description: ENI for RHEL Sample Fleet instance
          DeviceIndex: '0'
          SubnetId: !Ref PrivateSubnetB
          GroupSet:
          - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: Server Fleet Management Solution Sample Fleet Instance
        - Key: Environment
          Value: !Ref Environment
        - Key: Patch Group
          Value: !Ref Environment
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            mkdir /tmp/ssm
            cd /tmp/ssm
            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm

  UbuntuInstance:
    Type: AWS::EC2::Instance
    Condition: CreateFleet
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !GetAtt UbuntuLAMIInfo.ImageId
      InstanceType: !FindInMap [ EC2, Instance, Type ]
      NetworkInterfaces:
        - DeleteOnTermination: true
          Description: ENI for Ubuntu Sample Fleet instance
          DeviceIndex: '0'
          SubnetId: !Ref PrivateSubnetA
          GroupSet:
          - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: Server Fleet Management Solution Sample Fleet Instance
        - Key: Environment
          Value: !Ref Environment
        - Key: Patch Group
          Value: !Ref Environment

  WindowsInstance:
    Type: AWS::EC2::Instance
    Condition: CreateFleet
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !GetAtt WindowsAMIInfo.ImageId
      InstanceType: !FindInMap [ EC2, Instance, Type ]
      NetworkInterfaces:
        - DeleteOnTermination: true
          Description: ENI for Windows Sample Fleet instance
          DeviceIndex: '0'
          SubnetId: !Ref PrivateSubnetB
          GroupSet:
          - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: Server Fleet Management Solution Sample Fleet Instance
        - Key: Environment
          Value: !Ref Environment
        - Key: Patch Group
          Value: !Ref Environment

#==================================================
# Custom resource Lambda function
#==================================================
  CustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Server fleet management at scale custom resource Lambda function
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], !Ref "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"], "sfm-custom-resource.zip"]]
      Handler: sfm-custom-resource.lambda_handler
      Role: !GetAtt CustomResourceRole.Arn
      Runtime: python3.8
      Timeout: 300
      MemorySize: 128

  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Helper_Permissions
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
              - ec2:DescribeImages
            Resource: "*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: The * resource is to create CloudWatch logs and describe EC2 images which cannot be specified.

#==================================================
# Custom resource - AMI of instances
#==================================================
  AMZNLinuxAMIInfo:
    Type: Custom::GetAMIInfo
    Properties:
      ServiceToken: !GetAtt CustomResourceLambda.Arn
      AMI_NAME: !FindInMap [ AWSAMIRegionMap, AMI, AMZNLINUX ]

  RHELAMIInfo:
    Type: Custom::GetAMIInfo
    Properties:
      ServiceToken: !GetAtt CustomResourceLambda.Arn
      AMI_NAME: !FindInMap [ AWSAMIRegionMap, AMI, REDHAT ]

  UbuntuLAMIInfo:
    Type: Custom::GetAMIInfo
    Properties:
      ServiceToken: !GetAtt CustomResourceLambda.Arn
      AMI_NAME: !FindInMap [ AWSAMIRegionMap, AMI, UBUNTU ]

  WindowsAMIInfo:
    Type: Custom::GetAMIInfo
    Properties:
      ServiceToken: !GetAtt CustomResourceLambda.Arn
      AMI_NAME: !FindInMap [ AWSAMIRegionMap, AMI, WINDOWS ]

#==================================================
# Custom Resource - UUID and anonymous metric
#==================================================
  CreateUniqueID:
    Type: Custom::CreateUuid
    Properties:
      ServiceToken: !GetAtt CustomResourceLambda.Arn

  SendData:
    Type: Custom::SendAnonymousMetric
    Condition: SendAnonymousData
    Properties:
      ServiceToken: !GetAtt CustomResourceLambda.Arn
      Region: !Ref "AWS::Region"
      SolutionId: !FindInMap ["Solution", "Data", "Id"]
      SolutionVersion: !FindInMap ["Solution", "Data", "Version"]
      SolutionUuid: !GetAtt CreateUniqueID.UUID

#==================================================
# Outputs
#==================================================
Outputs:

  MaintenanceWindow:
    Export:
      Name: !Sub ${AWS::StackName}-MaintenanceWindow
    Value: !Ref MaintenanceWindow

  ArtifactBucket:
    Export:
      Name: !Sub ${AWS::StackName}-ArtifactBucket
    Value: !Ref ArtifactBucket

  ArtifactBucketEncryptionKey:
    Export:
      Name: !Sub ${AWS::StackName}-ArtifactBucketEncryptionKey
    Value: !Ref ArtifactBucketEncryptionKey

  ArtifactBucketEncryptionKeyAlias:
    Export:
      Name: !Sub ${AWS::StackName}-ArtifactBucketEncryptionKeyAlias
    Value: !Ref ArtifactBucketEncryptionKeyAlias

  ManagedInstanceTagValueParameter:
    Export:
      Name: !Sub ${AWS::StackName}-ManagedInstanceTagValueParameter
    Value: !Ref ManagedInstanceTagValueParameter

  VPC:
    Condition: CreateFleet
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC

  CreateFleet:
    Export:
      Name: !Sub ${AWS::StackName}-CreateFleet
    Value: !Ref CreateFleet

  UUID:
    Description: Anonymous UUID for each stack deployment
    Value: !Sub ${CreateUniqueID.UUID}
